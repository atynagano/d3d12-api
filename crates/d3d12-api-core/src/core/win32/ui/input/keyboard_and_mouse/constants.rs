#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(unused_parens)]
#![allow(unused_imports, dead_code, unused_variables, unused_unsafe)]

use std::ffi::c_void;
use std::ptr::{NonNull, null};
use std::num::NonZeroUsize;
use std::mem::{MaybeUninit, size_of_val, transmute};
use std::ops::Deref;
use crate::helpers::*;
use super::*;
use crate::core::win32::foundation::*;
use crate::core::win32::system::com::*;

use std::ops::{BitOr, BitOrAssign};

pub const EXTENDED_BIT: u32 = 0x1000000u32;
pub const DONTCARE_BIT: u32 = 0x2000000u32;
pub const FAKE_KEYSTROKE: u32 = 0x2000000u32;
pub const KBDBASE: u32 = 0x0u32;
pub const KBDSHIFT: u32 = 0x1u32;
pub const KBDCTRL: u32 = 0x2u32;
pub const KBDALT: u32 = 0x4u32;
pub const KBDKANA: u32 = 0x8u32;
pub const KBDROYA: u32 = 0x10u32;
pub const KBDLOYA: u32 = 0x20u32;
pub const KBDGRPSELTAP: u32 = 0x80u32;
pub const GRAVE: u32 = 0x300u32;
pub const ACUTE: u32 = 0x301u32;
pub const CIRCUMFLEX: u32 = 0x302u32;
pub const TILDE: u32 = 0x303u32;
pub const MACRON: u32 = 0x304u32;
pub const OVERSCORE: u32 = 0x305u32;
pub const BREVE: u32 = 0x306u32;
pub const DOT_ABOVE: u32 = 0x307u32;
pub const UMLAUT: u32 = 0x308u32;
pub const DIARESIS: u32 = 0x308u32;
pub const HOOK_ABOVE: u32 = 0x309u32;
pub const RING: u32 = 0x30Au32;
pub const DOUBLE_ACUTE: u32 = 0x30Bu32;
pub const HACEK: u32 = 0x30Cu32;
pub const CEDILLA: u32 = 0x327u32;
pub const OGONEK: u32 = 0x328u32;
pub const TONOS: u32 = 0x384u32;
pub const DIARESIS_TONOS: u32 = 0x385u32;
pub const SHFT_INVALID: u32 = 0xFu32;
pub const WCH_NONE: u32 = 0xF000u32;
pub const WCH_DEAD: u32 = 0xF001u32;
pub const WCH_LGTR: u32 = 0xF002u32;
pub const CAPLOK: u32 = 0x1u32;
pub const SGCAPS: u32 = 0x2u32;
pub const CAPLOKALTGR: u32 = 0x4u32;
pub const KANALOK: u32 = 0x8u32;
pub const GRPSELTAP: u32 = 0x80u32;
pub const DKF_DEAD: u32 = 0x1u32;
pub const KBD_VERSION: u32 = 0x1u32;
pub const KLLF_ALTGR: u32 = 0x1u32;
pub const KLLF_SHIFTLOCK: u32 = 0x2u32;
pub const KLLF_LRM_RLM: u32 = 0x4u32;
pub const KLLF_GLOBAL_ATTRS: u32 = 0x2u32;
pub const KBDTABLE_MULTI_MAX: u32 = 0x8u32;
pub const KEYBOARD_TYPE_GENERIC_101: u32 = 0x4u32;
pub const KEYBOARD_TYPE_JAPAN: u32 = 0x7u32;
pub const KEYBOARD_TYPE_KOREA: u32 = 0x8u32;
pub const KEYBOARD_TYPE_UNKNOWN: u32 = 0x51u32;
pub const NLSKBD_OEM_MICROSOFT: u32 = 0x0u32;
pub const NLSKBD_OEM_AX: u32 = 0x1u32;
pub const NLSKBD_OEM_EPSON: u32 = 0x4u32;
pub const NLSKBD_OEM_FUJITSU: u32 = 0x5u32;
pub const NLSKBD_OEM_IBM: u32 = 0x7u32;
pub const NLSKBD_OEM_MATSUSHITA: u32 = 0xAu32;
pub const NLSKBD_OEM_NEC: u32 = 0xDu32;
pub const NLSKBD_OEM_TOSHIBA: u32 = 0x12u32;
pub const NLSKBD_OEM_DEC: u32 = 0x18u32;
pub const MICROSOFT_KBD_101_TYPE: u32 = 0x0u32;
pub const MICROSOFT_KBD_AX_TYPE: u32 = 0x1u32;
pub const MICROSOFT_KBD_106_TYPE: u32 = 0x2u32;
pub const MICROSOFT_KBD_002_TYPE: u32 = 0x3u32;
pub const MICROSOFT_KBD_001_TYPE: u32 = 0x4u32;
pub const MICROSOFT_KBD_FUNC: u32 = 0xCu32;
pub const AX_KBD_DESKTOP_TYPE: u32 = 0x1u32;
pub const FMR_KBD_JIS_TYPE: u32 = 0x0u32;
pub const FMR_KBD_OASYS_TYPE: u32 = 0x1u32;
pub const FMV_KBD_OASYS_TYPE: u32 = 0x2u32;
pub const NEC_KBD_NORMAL_TYPE: u32 = 0x1u32;
pub const NEC_KBD_N_MODE_TYPE: u32 = 0x2u32;
pub const NEC_KBD_H_MODE_TYPE: u32 = 0x3u32;
pub const NEC_KBD_LAPTOP_TYPE: u32 = 0x4u32;
pub const NEC_KBD_106_TYPE: u32 = 0x5u32;
pub const TOSHIBA_KBD_DESKTOP_TYPE: u32 = 0xDu32;
pub const TOSHIBA_KBD_LAPTOP_TYPE: u32 = 0xFu32;
pub const DEC_KBD_ANSI_LAYOUT_TYPE: u32 = 0x1u32;
pub const DEC_KBD_JIS_LAYOUT_TYPE: u32 = 0x2u32;
pub const MICROSOFT_KBD_101A_TYPE: u32 = 0x0u32;
pub const MICROSOFT_KBD_101B_TYPE: u32 = 0x4u32;
pub const MICROSOFT_KBD_101C_TYPE: u32 = 0x5u32;
pub const MICROSOFT_KBD_103_TYPE: u32 = 0x6u32;
pub const NLSKBD_INFO_SEND_IME_NOTIFICATION: u32 = 0x1u32;
pub const NLSKBD_INFO_ACCESSIBILITY_KEYMAP: u32 = 0x2u32;
pub const NLSKBD_INFO_EMURATE_101_KEYBOARD: u32 = 0x10u32;
pub const NLSKBD_INFO_EMURATE_106_KEYBOARD: u32 = 0x20u32;
pub const KBDNLS_TYPE_NULL: u32 = 0x0u32;
pub const KBDNLS_TYPE_NORMAL: u32 = 0x1u32;
pub const KBDNLS_TYPE_TOGGLE: u32 = 0x2u32;
pub const KBDNLS_INDEX_NORMAL: u32 = 0x1u32;
pub const KBDNLS_INDEX_ALT: u32 = 0x2u32;
pub const KBDNLS_NULL: u32 = 0x0u32;
pub const KBDNLS_NOEVENT: u32 = 0x1u32;
pub const KBDNLS_SEND_BASE_VK: u32 = 0x2u32;
pub const KBDNLS_SEND_PARAM_VK: u32 = 0x3u32;
pub const KBDNLS_KANALOCK: u32 = 0x4u32;
pub const KBDNLS_ALPHANUM: u32 = 0x5u32;
pub const KBDNLS_HIRAGANA: u32 = 0x6u32;
pub const KBDNLS_KATAKANA: u32 = 0x7u32;
pub const KBDNLS_SBCSDBCS: u32 = 0x8u32;
pub const KBDNLS_ROMAN: u32 = 0x9u32;
pub const KBDNLS_CODEINPUT: u32 = 0xAu32;
pub const KBDNLS_HELP_OR_END: u32 = 0xBu32;
pub const KBDNLS_HOME_OR_CLEAR: u32 = 0xCu32;
pub const KBDNLS_NUMPAD: u32 = 0xDu32;
pub const KBDNLS_KANAEVENT: u32 = 0xEu32;
pub const KBDNLS_CONV_OR_NONCONV: u32 = 0xFu32;
pub const KBD_TYPE: u32 = 0x4u32;
pub const VK__none_: u32 = 0xFFu32;
pub const VK_ABNT_C1: u32 = 0xC1u32;
pub const VK_ABNT_C2: u32 = 0xC2u32;
pub const SCANCODE_LSHIFT: u32 = 0x2Au32;
pub const SCANCODE_RSHIFT: u32 = 0x36u32;
pub const SCANCODE_CTRL: u32 = 0x1Du32;
pub const SCANCODE_ALT: u32 = 0x38u32;
pub const SCANCODE_NUMPAD_FIRST: u32 = 0x47u32;
pub const SCANCODE_NUMPAD_LAST: u32 = 0x52u32;
pub const SCANCODE_LWIN: u32 = 0x5Bu32;
pub const SCANCODE_RWIN: u32 = 0x5Cu32;
pub const SCANCODE_THAI_LAYOUT_TOGGLE: u32 = 0x29u32;
pub const VK_DBE_ALPHANUMERIC: u32 = 0xF0u32;
pub const VK_DBE_KATAKANA: u32 = 0xF1u32;
pub const VK_DBE_HIRAGANA: u32 = 0xF2u32;
pub const VK_DBE_SBCSCHAR: u32 = 0xF3u32;
pub const VK_DBE_DBCSCHAR: u32 = 0xF4u32;
pub const VK_DBE_ROMAN: u32 = 0xF5u32;
pub const VK_DBE_NOROMAN: u32 = 0xF6u32;
pub const VK_DBE_ENTERWORDREGISTERMODE: u32 = 0xF7u32;
pub const VK_DBE_ENTERIMECONFIGMODE: u32 = 0xF8u32;
pub const VK_DBE_FLUSHSTRING: u32 = 0xF9u32;
pub const VK_DBE_CODEINPUT: u32 = 0xFAu32;
pub const VK_DBE_NOCODEINPUT: u32 = 0xFBu32;
pub const VK_DBE_DETERMINESTRING: u32 = 0xFCu32;
pub const VK_DBE_ENTERDLGCONVERSIONMODE: u32 = 0xFDu32;

